{"version":3,"file":"react-context-hook.js","sources":["../src/StoreContext.js","../src/redux/actionTypes.js","../src/redux/reducer.js","../src/redux/middleware.js","../src/redux/store.js","../src/redux/actions.js","../src/rawStore.js","../src/defaultConfig.js","../src/withStore.js","../src/redux/util/Subscription.js","../src/useStore.js"],"sourcesContent":["import React from 'react'\nexport default React.createContext(null)\n","export const SET_VALUE = 'SET VALUE'\nexport const REMOVE_VALUE = 'REMOVE VALUE'\nexport const RESET = 'RESET STORE'\n","import { combineReducers } from 'redux'\n\nimport { SET_VALUE, REMOVE_VALUE, RESET } from './actionTypes'\n\nfunction mainReducer(state = {}, action) {\n  switch (action.type) {\n    case SET_VALUE: {\n      const { key, value } = action.payload\n      const newState = {\n        ...state\n      }\n      newState[key] = value\n      return newState\n    }\n    case REMOVE_VALUE: {\n      const { key } = action.payload\n      const newState = {\n        ...state\n      }\n      delete newState[key]\n      return newState\n    }\n    case RESET: {\n      return action.payload\n    }\n    default:\n      return state\n  }\n}\n\nexport default combineReducers({ main: mainReducer })\n","export const logger = ({ getState }) => (next) => (action) => {\n  const prevState = getState().main\n  const returnValue = next(action)\n  console.group(`%c react-context-hook`, 'font-weight: bold')\n  console.info(\n    `%c ${'PREV STATE'} `,\n    'background: #00e5a0;font-weight: bold',\n    prevState\n  )\n  console.info(\n    `%c ${'ACTION'} %c ${action.type}`,\n    'background: yellow;font-weight: bold',\n    'font-weight: bold;',\n    action.payload.key || '',\n    action.payload.value || action.payload\n  )\n  console.info(\n    `%c ${'NEXT STATE'} `,\n    'background: #00cbff;font-weight: bold',\n    getState().main\n  )\n  console.groupEnd()\n  return returnValue\n}\n\nexport const listenerMiddleware = (listener) => ({ getState }) => (next) => (\n  action\n) => {\n  const { key } = action.payload\n  const prevValue = getState().main[key]\n  const value = next(action)\n  const nextValue = getState().main[key]\n  listener(getState().main, key, prevValue, nextValue)\n  return value\n}\n\n/**\n * @deprecated Use listenerMiddleware\n */\nexport const listernerMiddleware = listenerMiddleware\n","import { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './reducer'\nimport { logger, listenerMiddleware } from './middleware'\n\nexport default function storeCreator(initialValue = {}, config = {}) {\n  const { logging, listener } = config\n\n  const middlewares = [\n    listener && listenerMiddleware(listener),\n    logging && logger\n  ].filter(Boolean)\n\n  return createStore(\n    rootReducer,\n    { main: initialValue },\n    applyMiddleware(...middlewares)\n  )\n}\n","import { SET_VALUE, REMOVE_VALUE, RESET } from './actionTypes'\n\nexport const setStoreValueAction = (key, value) => ({\n  type: SET_VALUE,\n  payload: {\n    key,\n    value\n  }\n})\n\nexport const deleteStoreValueAction = (key) => ({\n  type: REMOVE_VALUE,\n  payload: {\n    key\n  }\n})\n\nexport const resetStoreWithValue = (state = {}) => ({\n  type: RESET,\n  payload: state\n})\n","import {\n  resetStoreWithValue,\n  setStoreValueAction,\n  deleteStoreValueAction\n} from './redux/actions'\n\nexport function createRawStore(store) {\n  return {\n    /**\n     * Resets the state to the given input.\n     *\n     * @param {Object} state the new value to reset the state to.\n     */\n    reset: function (state) {\n      store.dispatch(resetStoreWithValue(state))\n    },\n    /**\n     * Sets the specified key in the store. This function is equivaluent to the `useSetStoreValue` hook.\n     *\n     * @param {string} key the property to set in the store\n     * @param {Object} value the value of the property\n     */\n    set: function (key, value) {\n      store.dispatch(setStoreValueAction(key, value))\n    },\n    /**\n     * delete the specified key from the store. This function is equivaluent to the `useDeleteStoreValue` hook.\n     *\n     * @param {string} key the property to set in the store\n     */\n    delete: function (key) {\n      store.dispatch(deleteStoreValueAction(key))\n    },\n    /**\n     * @returns the global state value of the store\n     */\n    getState: function () {\n      return store.getState().main\n    }\n  }\n}\n","export default {}\n","import React from 'react'\nimport StoreContext from './StoreContext'\nimport createStore from './redux/store'\nimport { createRawStore } from './rawStore'\nimport defaultConfig from './defaultConfig'\n\n/**\n * This store can be used outside of React components.\n */\nlet rawStore = createRawStore(createStore())\n\n/**\n * @callback ConfigListener\n * @param {Object} state\n * @param {string} key\n * @param {any} prevValue\n * @param {any} nextValue\n * @returns {void}\n */\n\n/**\n * @param {ReactElement} WrappedComponent the component to connect with the store\n * @param {Object} [initialValue] an Object that will be the initial store value, or nothing\n * @param {Object} [config] the custom configuration. If nothing is passed, the default config will be used.\n * @param {ConfigListener} config.listener a function that is triggered each time the global state is modified. This function takes these parameters: (state, key, prevValue, nextValue). `state` is the value of the new state, `key` is the key that changed, `prevValue` is the old value of the key, `nextValule` is the new one.\n * @param {boolean} config.logging - default `false` - if true it will log changes to console\n * @example\n *const initialState = { count: 10 }\n *\n *const storeConfig = {\n *  listener: (state, key, prevValue, nextValue) => {\n      console.log(`the key \"${key}\" changed in the store`)\n      console.log('the old value is', prevValue)\n      console.log('the current value is', nextValue)\n      console.log('the state is', state)\n    },\n *  logging: process.env.NODE_ENV !== 'production'\n *}\n *\n *export default withStore(App, initialState, storeConfig)\n */\nexport const withStore = (WrappedComponent, initialValue, config) => {\n  const userConfig = Object.freeze({ ...defaultConfig, ...config })\n  const store = createStore(initialValue, userConfig)\n  rawStore = createRawStore(store)\n  return function (props) {\n    return (\n      <StoreContext.Provider value={{ store }}>\n        <WrappedComponent {...props} />\n      </StoreContext.Provider>\n    )\n  }\n}\n\nexport { rawStore }\n","class Subscription {\n  constructor(store, onStateChange) {\n    this.store = store\n    // this.handleChangeWrapper = this.handleChangeWrapper.bind(this)\n    this.unsuscribeFromSubscription = null\n    this.onStateChange = onStateChange.bind(this)\n  }\n\n  subscribe() {\n    this.unsuscribeFromSubscription = this.store.subscribe(this.onStateChange)\n  }\n\n  unsubscribe() {\n    this.unsuscribeFromSubscription()\n    this.unsuscribeFromSubscription = null\n  }\n}\n\nexport default Subscription\n","import { useContext, useReducer, useMemo, useRef, useEffect } from 'react'\nimport StoreContext from './StoreContext'\nimport Subscription from './redux/util/Subscription'\nimport { setStoreValueAction, deleteStoreValueAction } from './redux/actions'\n\nfunction equalityFn(a, b) {\n  return a === b\n}\n\nfunction useSelector(stateSelectorFn) {\n  const [, forceRender] = useReducer((s) => s + 1, 0)\n  const { store } = useContext(StoreContext)\n  const latestStateSelectorFn = useRef()\n  const latestSelectedState = useRef()\n  function checkForUpdates() {\n    try {\n      const newSelectedState = latestStateSelectorFn.current(\n        store.getState().main\n      )\n\n      if (equalityFn(newSelectedState, latestSelectedState.current)) {\n        return\n      }\n\n      latestSelectedState.current = newSelectedState\n    } catch (err) {\n      // ignore all errors\n    }\n\n    forceRender({})\n  }\n  const subscription = useMemo(() => new Subscription(store, checkForUpdates), [\n    store,\n    checkForUpdates\n  ])\n\n  let resultValue\n\n  if (stateSelectorFn !== latestStateSelectorFn.current) {\n    resultValue = stateSelectorFn(store.getState().main)\n  } else {\n    resultValue = latestSelectedState.current\n  }\n\n  useEffect(() => {\n    latestStateSelectorFn.current = stateSelectorFn\n    latestSelectedState.current = resultValue\n  })\n\n  useEffect(() => {\n    subscription.subscribe()\n    checkForUpdates()\n\n    return () => subscription.unsubscribe()\n  }, [store, subscription])\n\n  return resultValue\n}\n\n/**\n * `useStore` is a React Hook that access a value stored in the application global store. It returns the value, a function to update it (like React.useState) and a function to delete it.\n *\n * @template {any} T\n * @param {string} key - The lookup key to find the saved value in the store\n * @param {T} [defaultValue] - The value if the value in the store is missing\n *\n * @returns {[T, (value: T) => void, () => void]}\n * @return {array} an array with length 3:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *setValue* to modify the data in the store.<br>\n * position 2 - a function *deleteValue* to delete the value from the store.<br>\n *\n * @example\n * import {useStore} from 'react-context-hook'\n * const [username, setUsername, deleteUsername] = useStore('username')\n * <div>hello {username}</div>\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n *\n */\nfunction useStore(key, defaultValue) {\n  return [\n    useStoreValue(key, defaultValue),\n    useSetStoreValue(key),\n    useDeleteStoreValue(key)\n  ]\n}\n\n/**\n * Returns a function to set or update a variable in the store. You want to use this hook when you just need to modify the store, not read or delete a value from it.\n * @template {any} T\n * @param {string} key - the name of the variable to set in the store\n * @returns {(value: T) => void}\n * @return {Function} - a function to set a variable in the store with the given name<br>\n *\n * @example\n * import {useSetStoreValue} from 'react-context-hook'\n * const setUsername = useSetStoreValue('username')\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n */\nfunction useSetStoreValue(key) {\n  const { store } = useContext(StoreContext)\n  return function (value) {\n    store.dispatch(setStoreValueAction(key, value))\n  }\n}\n\n/**\n * Returns a function to delete a variable in the store. You want to use this hook when you just need to delete a value in the store, not read or set a value from it.\n * @template {any} T\n * @param {string} key - the name of the variable to set in the store\n * @returns {(value: T) => void}\n * @return {Function} - a function to delete a variable in the store with the given name.\n *\n * @example\n * import {useDeleteStoreValue} from 'react-context-hook'\n * const deleteUsername = useDeleteStoreValue('username')\n * <button onClick={()=> deleteUsername()}>set username</button>\n */\nfunction useDeleteStoreValue(key) {\n  const { store } = useContext(StoreContext)\n  return function () {\n    store.dispatch(deleteStoreValueAction(key))\n  }\n}\n\n/**\n *This React hook returns an array to read and modify a value in the store:\n * `const [value, setValue] = useGetAndSet('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @template {any} T\n * @param {string} key - The lookup key to find the saved value in the store\n * @param {T} [defaultValue] - The default value if missing\n * @returns {[T, (value: T) => void]}\n * @return {array} an array with length 2:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *setValue* to modify the data in the store.<br>\n *\n * @example\n * import {useGetAndSet} from 'react-context-hook'\n * const [username, setUsername] = useGetAndSet('username')\n * <div>hello {username}</div>\n * <button onClick={()=> setUsername('my_username')}>set username</button>\n *\n *  const [value, setValue] = useGetAndSet('a_lookup_key_in_the_store')\n *\n */\nfunction useGetAndSet(key, defaultValue) {\n  return [useStoreValue(key, defaultValue), useSetStoreValue(key)]\n}\n\n/**\n *This React hook returns an array to read and delete a value in the store:\n * `const [value, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @template {any} T\n * @param {string} key - The lookup key to find the saved value in the store\n *\n * @returns {[T, (value: T) => void]}\n * @return {array} an array with length 2:<br>\n * position 0 - the value of the data in the store.<br>\n * position 1 - a function *deleteValue* to delete the data in the store.<br>\n *\n * @example\n * import {useGetAndDelete} from 'react-context-hook'\n * const [username, deleteUsername] = useGetAndDelete('username')\n * <div>hello {username}</div>\n * <button onClick={()=> deleteUsername('my_username')}>set username</button>\n *\n */\nfunction useGetAndDelete(key) {\n  return [useStoreValue(key), useDeleteStoreValue(key)]\n}\n\n/**\n *This React hook returns an array to set and delete a value in the store:\n * `const [setValue, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.\n * @template {any} T\n * @param {string} key - The lookup key to find the saved value in the store\n *\n * @returns {[(value: T) => void, () => void]}\n * @return {array} an array with length 2:<br>\n * position 0 - a function *setValue* to modify the data in the store.<br>\n * position 1 - a function *deleteValue* to delete the data in the store.<br>\n *\n * @example\n * import {useGetAndDelete} from 'react-context-hook'\n * const [username, deleteUsername] = useGetAndDelete('username')\n * <div>hello {username}</div>\n * <button onClick={()=> deleteUsername('my_username')}>set username</button>\n *\n */\nfunction useSetAndDelete(key) {\n  return [useSetStoreValue(key), useDeleteStoreValue(key)]\n}\n\n/**\n *\n * @template {any} T\n * @param {string} key - the name of the variable / value to be retrieved in the global store.\n * @param {T} [defaultValue] - an optional default value, if the value in the global store is not present.\n *\n * @returns {T | typeof defaultValue} the value on the global store, or the default value if passed, or `undefined`\n */\nfunction useStoreValue(key, defaultValue) {\n  function stateSelector(state) {\n    return state[key]\n  }\n  const storeValue = useSelector(stateSelector)\n  return storeValue !== undefined ? storeValue : defaultValue\n}\n\n/**\n * Returns the whole store value, with all the variables stored in it. Changes to this object will not change the store\n *\n * @returns {Record}\n * @return {object} - An object representing the whole store value in read only mode.\n *\n * @example\n * import {useStoreState} from 'react-context-hook'\n * const store = useStoreState()\n * console.log('the store is', JSON.stringify(store))\n */\nfunction useStoreState() {\n  function stateSelector(state) {\n    return state\n  }\n  return useSelector(stateSelector)\n}\n\nexport {\n  useStore,\n  useStoreState,\n  useStoreValue,\n  useSetStoreValue,\n  useDeleteStoreValue,\n  useGetAndSet,\n  useGetAndDelete,\n  useSetAndDelete\n}\n"],"names":["React","createContext","SET_VALUE","REMOVE_VALUE","RESET","mainReducer","state","action","type","payload","key","value","newState","combineReducers","main","logger","getState","next","prevState","returnValue","console","group","info","groupEnd","listenerMiddleware","listener","prevValue","nextValue","storeCreator","initialValue","config","logging","middlewares","filter","Boolean","createStore","rootReducer","applyMiddleware","setStoreValueAction","deleteStoreValueAction","resetStoreWithValue","createRawStore","store","reset","dispatch","set","rawStore","withStore","WrappedComponent","userConfig","Object","freeze","defaultConfig","props","Subscription","onStateChange","unsuscribeFromSubscription","bind","subscribe","equalityFn","a","b","useSelector","stateSelectorFn","useReducer","s","forceRender","useContext","StoreContext","latestStateSelectorFn","useRef","latestSelectedState","checkForUpdates","newSelectedState","current","err","subscription","useMemo","resultValue","useEffect","unsubscribe","useStore","defaultValue","useStoreValue","useSetStoreValue","useDeleteStoreValue","useGetAndSet","useGetAndDelete","useSetAndDelete","stateSelector","storeValue","undefined","useStoreState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,kCAAeA,yBAAK,CAACC,aAAN,CAAoB,IAApB,CAAf;;ECDO,IAAMC,SAAS,GAAG,WAAlB;EACA,IAAMC,YAAY,GAAG,cAArB;EACA,IAAMC,KAAK,GAAG,aAAd;;ECEP,SAASC,WAAT,GAAyC;EAAA,MAApBC,KAAoB,uEAAZ,EAAY;EAAA,MAARC,MAAQ;;EACvC,UAAQA,MAAM,CAACC,IAAf;EACE,SAAKN,SAAL;EAAgB;EAAA,8BACSK,MAAM,CAACE,OADhB;EAAA,YACNC,GADM,mBACNA,GADM;EAAA,YACDC,KADC,mBACDA,KADC;;EAEd,YAAMC,QAAQ,sBACTN,KADS,CAAd;;EAGAM,QAAAA,QAAQ,CAACF,GAAD,CAAR,GAAgBC,KAAhB;EACA,eAAOC,QAAP;EACD;;EACD,SAAKT,YAAL;EAAmB;EAAA,YACTO,IADS,GACDH,MAAM,CAACE,OADN,CACTC,GADS;;EAEjB,YAAME,SAAQ,sBACTN,KADS,CAAd;;EAGA,eAAOM,SAAQ,CAACF,IAAD,CAAf;EACA,eAAOE,SAAP;EACD;;EACD,SAAKR,KAAL;EAAY;EACV,eAAOG,MAAM,CAACE,OAAd;EACD;;EACD;EACE,aAAOH,KAAP;EArBJ;EAuBD;;AAED,oBAAeO,qBAAe,CAAC;EAAEC,EAAAA,IAAI,EAAET;EAAR,CAAD,CAA9B;;EC9BO,IAAMU,MAAM,GAAG,SAATA,MAAS;EAAA,MAAGC,QAAH,QAAGA,QAAH;EAAA,SAAkB,UAACC,IAAD;EAAA,WAAU,UAACV,MAAD,EAAY;EAC5D,UAAMW,SAAS,GAAGF,QAAQ,GAAGF,IAA7B;EACA,UAAMK,WAAW,GAAGF,IAAI,CAACV,MAAD,CAAxB;EACAa,MAAAA,OAAO,CAACC,KAAR,0BAAuC,mBAAvC;EACAD,MAAAA,OAAO,CAACE,IAAR,cACQ,YADR,QAEE,uCAFF,EAGEJ,SAHF;EAKAE,MAAAA,OAAO,CAACE,IAAR,cACQ,QADR,UACuBf,MAAM,CAACC,IAD9B,GAEE,sCAFF,EAGE,oBAHF,EAIED,MAAM,CAACE,OAAP,CAAeC,GAAf,IAAsB,EAJxB,EAKEH,MAAM,CAACE,OAAP,CAAeE,KAAf,IAAwBJ,MAAM,CAACE,OALjC;EAOAW,MAAAA,OAAO,CAACE,IAAR,cACQ,YADR,QAEE,uCAFF,EAGEN,QAAQ,GAAGF,IAHb;EAKAM,MAAAA,OAAO,CAACG,QAAR;EACA,aAAOJ,WAAP;EACD,KAvBuC;EAAA,GAAlB;EAAA,CAAf;EAyBA,IAAMK,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,QAAD;EAAA,SAAc;EAAA,QAAGT,QAAH,SAAGA,QAAH;EAAA,WAAkB,UAACC,IAAD;EAAA,aAAU,UAC1EV,MAD0E,EAEvE;EAAA,YACKG,GADL,GACaH,MAAM,CAACE,OADpB,CACKC,GADL;EAEH,YAAMgB,SAAS,GAAGV,QAAQ,GAAGF,IAAX,CAAgBJ,GAAhB,CAAlB;EACA,YAAMC,KAAK,GAAGM,IAAI,CAACV,MAAD,CAAlB;EACA,YAAMoB,SAAS,GAAGX,QAAQ,GAAGF,IAAX,CAAgBJ,GAAhB,CAAlB;EACAe,QAAAA,QAAQ,CAACT,QAAQ,GAAGF,IAAZ,EAAkBJ,GAAlB,EAAuBgB,SAAvB,EAAkCC,SAAlC,CAAR;EACA,eAAOhB,KAAP;EACD,OATiE;EAAA,KAAlB;EAAA,GAAd;EAAA,CAA3B;;ECrBQ,SAASiB,YAAT,GAAsD;EAAA,MAAhCC,YAAgC,uEAAjB,EAAiB;EAAA,MAAbC,MAAa,uEAAJ,EAAI;EAAA,MAC3DC,OAD2D,GACrCD,MADqC,CAC3DC,OAD2D;EAAA,MAClDN,QADkD,GACrCK,MADqC,CAClDL,QADkD;EAGnE,MAAMO,WAAW,GAAG,CAClBP,QAAQ,IAAID,kBAAkB,CAACC,QAAD,CADZ,EAElBM,OAAO,IAAIhB,MAFO,EAGlBkB,MAHkB,CAGXC,OAHW,CAApB;EAKA,SAAOC,iBAAW,CAChBC,WADgB,EAEhB;EAAEtB,IAAAA,IAAI,EAAEe;EAAR,GAFgB,EAGhBQ,qBAAe,MAAf,4BAAmBL,WAAnB,EAHgB,CAAlB;EAKD;;ECfM,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAC5B,GAAD,EAAMC,KAAN;EAAA,SAAiB;EAClDH,IAAAA,IAAI,EAAEN,SAD4C;EAElDO,IAAAA,OAAO,EAAE;EACPC,MAAAA,GAAG,EAAHA,GADO;EAEPC,MAAAA,KAAK,EAALA;EAFO;EAFyC,GAAjB;EAAA,CAA5B;EAQA,IAAM4B,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAC7B,GAAD;EAAA,SAAU;EAC9CF,IAAAA,IAAI,EAAEL,YADwC;EAE9CM,IAAAA,OAAO,EAAE;EACPC,MAAAA,GAAG,EAAHA;EADO;EAFqC,GAAV;EAAA,CAA/B;EAOA,IAAM8B,mBAAmB,GAAG,SAAtBA,mBAAsB;EAAA,MAAClC,KAAD,uEAAS,EAAT;EAAA,SAAiB;EAClDE,IAAAA,IAAI,EAAEJ,KAD4C;EAElDK,IAAAA,OAAO,EAAEH;EAFyC,GAAjB;EAAA,CAA5B;;ECXA,SAASmC,cAAT,CAAwBC,KAAxB,EAA+B;EACpC,SAAO;EACL;EACJ;EACA;EACA;EACA;EACIC,IAAAA,KAAK,EAAE,eAAUrC,KAAV,EAAiB;EACtBoC,MAAAA,KAAK,CAACE,QAAN,CAAeJ,mBAAmB,CAAClC,KAAD,CAAlC;EACD,KARI;;EASL;EACJ;EACA;EACA;EACA;EACA;EACIuC,IAAAA,GAAG,EAAE,aAAUnC,GAAV,EAAeC,KAAf,EAAsB;EACzB+B,MAAAA,KAAK,CAACE,QAAN,CAAeN,mBAAmB,CAAC5B,GAAD,EAAMC,KAAN,CAAlC;EACD,KAjBI;;EAkBL;EACJ;EACA;EACA;EACA;EACI,cAAQ,iBAAUD,GAAV,EAAe;EACrBgC,MAAAA,KAAK,CAACE,QAAN,CAAeL,sBAAsB,CAAC7B,GAAD,CAArC;EACD,KAzBI;;EA0BL;EACJ;EACA;EACIM,IAAAA,QAAQ,EAAE,oBAAY;EACpB,aAAO0B,KAAK,CAAC1B,QAAN,GAAiBF,IAAxB;EACD;EA/BI,GAAP;EAiCD;;ACxCD,sBAAe,EAAf;;ECMA;EACA;EACA;;AACIgC,eAAQ,GAAGL,cAAc,CAACN,YAAW,EAAZ;EAE7B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;MACaY,SAAS,GAAG,SAAZA,SAAY,CAACC,gBAAD,EAAmBnB,YAAnB,EAAiCC,MAAjC,EAA4C;EACnE,MAAMmB,UAAU,GAAGC,MAAM,CAACC,MAAP,mCAAmBC,aAAnB,GAAqCtB,MAArC,EAAnB;EACA,MAAMY,KAAK,GAAGP,YAAW,CAACN,YAAD,EAAeoB,UAAf,CAAzB;EACAH,EAAAA,aAAQ,GAAGL,cAAc,CAACC,KAAD,CAAzB;EACA,SAAO,UAAUW,KAAV,EAAiB;EACtB,wBACErD,wCAAC,YAAD,CAAc,QAAd;EAAuB,MAAA,KAAK,EAAE;EAAE0C,QAAAA,KAAK,EAALA;EAAF;EAA9B,oBACE1C,wCAAC,gBAAD,EAAsBqD,KAAtB,CADF,CADF;EAKD,GAND;EAOD;;MCpDKC;EACJ,wBAAYZ,KAAZ,EAAmBa,aAAnB,EAAkC;EAAA;;EAChC,SAAKb,KAAL,GAAaA,KAAb,CADgC;;EAGhC,SAAKc,0BAAL,GAAkC,IAAlC;EACA,SAAKD,aAAL,GAAqBA,aAAa,CAACE,IAAd,CAAmB,IAAnB,CAArB;EACD;;;;aAED,qBAAY;EACV,WAAKD,0BAAL,GAAkC,KAAKd,KAAL,CAAWgB,SAAX,CAAqB,KAAKH,aAA1B,CAAlC;EACD;;;aAED,uBAAc;EACZ,WAAKC,0BAAL;EACA,WAAKA,0BAAL,GAAkC,IAAlC;EACD;;;;;;ECVH,SAASG,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;EACxB,SAAOD,CAAC,KAAKC,CAAb;EACD;;EAED,SAASC,WAAT,CAAqBC,eAArB,EAAsC;EAAA,oBACZC,gBAAU,CAAC,UAACC,CAAD;EAAA,WAAOA,CAAC,GAAG,CAAX;EAAA,GAAD,EAAe,CAAf,CADE;EAAA;EAAA,MAC3BC,WAD2B;;EAAA,oBAElBC,gBAAU,CAACC,YAAD,CAFQ;EAAA,MAE5B1B,KAF4B,eAE5BA,KAF4B;;EAGpC,MAAM2B,qBAAqB,GAAGC,YAAM,EAApC;EACA,MAAMC,mBAAmB,GAAGD,YAAM,EAAlC;;EACA,WAASE,eAAT,GAA2B;EACzB,QAAI;EACF,UAAMC,gBAAgB,GAAGJ,qBAAqB,CAACK,OAAtB,CACvBhC,KAAK,CAAC1B,QAAN,GAAiBF,IADM,CAAzB;;EAIA,UAAI6C,UAAU,CAACc,gBAAD,EAAmBF,mBAAmB,CAACG,OAAvC,CAAd,EAA+D;EAC7D;EACD;;EAEDH,MAAAA,mBAAmB,CAACG,OAApB,GAA8BD,gBAA9B;EACD,KAVD,CAUE,OAAOE,GAAP,EAAY;EAEb;;EAEDT,IAAAA,WAAW,CAAC,EAAD,CAAX;EACD;;EACD,MAAMU,YAAY,GAAGC,aAAO,CAAC;EAAA,WAAM,IAAIvB,YAAJ,CAAiBZ,KAAjB,EAAwB8B,eAAxB,CAAN;EAAA,GAAD,EAAiD,CAC3E9B,KAD2E,EAE3E8B,eAF2E,CAAjD,CAA5B;EAKA,MAAIM,WAAJ;;EAEA,MAAIf,eAAe,KAAKM,qBAAqB,CAACK,OAA9C,EAAuD;EACrDI,IAAAA,WAAW,GAAGf,eAAe,CAACrB,KAAK,CAAC1B,QAAN,GAAiBF,IAAlB,CAA7B;EACD,GAFD,MAEO;EACLgE,IAAAA,WAAW,GAAGP,mBAAmB,CAACG,OAAlC;EACD;;EAEDK,EAAAA,eAAS,CAAC,YAAM;EACdV,IAAAA,qBAAqB,CAACK,OAAtB,GAAgCX,eAAhC;EACAQ,IAAAA,mBAAmB,CAACG,OAApB,GAA8BI,WAA9B;EACD,GAHQ,CAAT;EAKAC,EAAAA,eAAS,CAAC,YAAM;EACdH,IAAAA,YAAY,CAAClB,SAAb;EACAc,IAAAA,eAAe;EAEf,WAAO;EAAA,aAAMI,YAAY,CAACI,WAAb,EAAN;EAAA,KAAP;EACD,GALQ,EAKN,CAACtC,KAAD,EAAQkC,YAAR,CALM,CAAT;EAOA,SAAOE,WAAP;EACD;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,SAASG,QAAT,CAAkBvE,GAAlB,EAAuBwE,YAAvB,EAAqC;EACnC,SAAO,CACLC,aAAa,CAACzE,GAAD,EAAMwE,YAAN,CADR,EAELE,gBAAgB,CAAC1E,GAAD,CAFX,EAGL2E,mBAAmB,CAAC3E,GAAD,CAHd,CAAP;EAKD;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,SAAS0E,gBAAT,CAA0B1E,GAA1B,EAA+B;EAAA,qBACXyD,gBAAU,CAACC,YAAD,CADC;EAAA,MACrB1B,KADqB,gBACrBA,KADqB;;EAE7B,SAAO,UAAU/B,KAAV,EAAiB;EACtB+B,IAAAA,KAAK,CAACE,QAAN,CAAeN,mBAAmB,CAAC5B,GAAD,EAAMC,KAAN,CAAlC;EACD,GAFD;EAGD;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,SAAS0E,mBAAT,CAA6B3E,GAA7B,EAAkC;EAAA,qBACdyD,gBAAU,CAACC,YAAD,CADI;EAAA,MACxB1B,KADwB,gBACxBA,KADwB;;EAEhC,SAAO,YAAY;EACjBA,IAAAA,KAAK,CAACE,QAAN,CAAeL,sBAAsB,CAAC7B,GAAD,CAArC;EACD,GAFD;EAGD;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,SAAS4E,YAAT,CAAsB5E,GAAtB,EAA2BwE,YAA3B,EAAyC;EACvC,SAAO,CAACC,aAAa,CAACzE,GAAD,EAAMwE,YAAN,CAAd,EAAmCE,gBAAgB,CAAC1E,GAAD,CAAnD,CAAP;EACD;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,SAAS6E,eAAT,CAAyB7E,GAAzB,EAA8B;EAC5B,SAAO,CAACyE,aAAa,CAACzE,GAAD,CAAd,EAAqB2E,mBAAmB,CAAC3E,GAAD,CAAxC,CAAP;EACD;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,SAAS8E,eAAT,CAAyB9E,GAAzB,EAA8B;EAC5B,SAAO,CAAC0E,gBAAgB,CAAC1E,GAAD,CAAjB,EAAwB2E,mBAAmB,CAAC3E,GAAD,CAA3C,CAAP;EACD;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,SAASyE,aAAT,CAAuBzE,GAAvB,EAA4BwE,YAA5B,EAA0C;EACxC,WAASO,aAAT,CAAuBnF,KAAvB,EAA8B;EAC5B,WAAOA,KAAK,CAACI,GAAD,CAAZ;EACD;;EACD,MAAMgF,UAAU,GAAG5B,WAAW,CAAC2B,aAAD,CAA9B;EACA,SAAOC,UAAU,KAAKC,SAAf,GAA2BD,UAA3B,GAAwCR,YAA/C;EACD;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,SAASU,aAAT,GAAyB;EACvB,WAASH,aAAT,CAAuBnF,KAAvB,EAA8B;EAC5B,WAAOA,KAAP;EACD;;EACD,SAAOwD,WAAW,CAAC2B,aAAD,CAAlB;EACD;;;;;;;;;;;;;;;;;;"}