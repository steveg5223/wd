import React, { useContext, useReducer, useRef, useMemo, useEffect } from 'react';
import { combineReducers, createStore, applyMiddleware } from 'redux';

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var StoreContext = /*#__PURE__*/React.createContext(null);

var SET_VALUE = 'SET VALUE';
var REMOVE_VALUE = 'REMOVE VALUE';
var RESET = 'RESET STORE';

function mainReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case SET_VALUE:
      {
        var _action$payload = action.payload,
            key = _action$payload.key,
            value = _action$payload.value;

        var newState = _objectSpread2({}, state);

        newState[key] = value;
        return newState;
      }

    case REMOVE_VALUE:
      {
        var _key = action.payload.key;

        var _newState = _objectSpread2({}, state);

        delete _newState[_key];
        return _newState;
      }

    case RESET:
      {
        return action.payload;
      }

    default:
      return state;
  }
}

var rootReducer = combineReducers({
  main: mainReducer
});

var logger = function logger(_ref) {
  var getState = _ref.getState;
  return function (next) {
    return function (action) {
      var prevState = getState().main;
      var returnValue = next(action);
      console.group("%c react-context-hook", 'font-weight: bold');
      console.info("%c ".concat('PREV STATE', " "), 'background: #00e5a0;font-weight: bold', prevState);
      console.info("%c ".concat('ACTION', " %c ", action.type), 'background: yellow;font-weight: bold', 'font-weight: bold;', action.payload.key || '', action.payload.value || action.payload);
      console.info("%c ".concat('NEXT STATE', " "), 'background: #00cbff;font-weight: bold', getState().main);
      console.groupEnd();
      return returnValue;
    };
  };
};
var listenerMiddleware = function listenerMiddleware(listener) {
  return function (_ref2) {
    var getState = _ref2.getState;
    return function (next) {
      return function (action) {
        var key = action.payload.key;
        var prevValue = getState().main[key];
        var value = next(action);
        var nextValue = getState().main[key];
        listener(getState().main, key, prevValue, nextValue);
        return value;
      };
    };
  };
};

function storeCreator() {
  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var logging = config.logging,
      listener = config.listener;
  var middlewares = [listener && listenerMiddleware(listener), logging && logger].filter(Boolean);
  return createStore(rootReducer, {
    main: initialValue
  }, applyMiddleware.apply(void 0, _toConsumableArray(middlewares)));
}

var setStoreValueAction = function setStoreValueAction(key, value) {
  return {
    type: SET_VALUE,
    payload: {
      key: key,
      value: value
    }
  };
};
var deleteStoreValueAction = function deleteStoreValueAction(key) {
  return {
    type: REMOVE_VALUE,
    payload: {
      key: key
    }
  };
};
var resetStoreWithValue = function resetStoreWithValue() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    type: RESET,
    payload: state
  };
};

function createRawStore(store) {
  return {
    /**
     * Resets the state to the given input.
     *
     * @param {Object} state the new value to reset the state to.
     */
    reset: function reset(state) {
      store.dispatch(resetStoreWithValue(state));
    },

    /**
     * Sets the specified key in the store. This function is equivaluent to the `useSetStoreValue` hook.
     *
     * @param {string} key the property to set in the store
     * @param {Object} value the value of the property
     */
    set: function set(key, value) {
      store.dispatch(setStoreValueAction(key, value));
    },

    /**
     * delete the specified key from the store. This function is equivaluent to the `useDeleteStoreValue` hook.
     *
     * @param {string} key the property to set in the store
     */
    "delete": function _delete(key) {
      store.dispatch(deleteStoreValueAction(key));
    },

    /**
     * @returns the global state value of the store
     */
    getState: function getState() {
      return store.getState().main;
    }
  };
}

var defaultConfig = {};

/**
 * This store can be used outside of React components.
 */

var rawStore = createRawStore(storeCreator());
/**
 * @callback ConfigListener
 * @param {Object} state
 * @param {string} key
 * @param {any} prevValue
 * @param {any} nextValue
 * @returns {void}
 */

/**
 * @param {ReactElement} WrappedComponent the component to connect with the store
 * @param {Object} [initialValue] an Object that will be the initial store value, or nothing
 * @param {Object} [config] the custom configuration. If nothing is passed, the default config will be used.
 * @param {ConfigListener} config.listener a function that is triggered each time the global state is modified. This function takes these parameters: (state, key, prevValue, nextValue). `state` is the value of the new state, `key` is the key that changed, `prevValue` is the old value of the key, `nextValule` is the new one.
 * @param {boolean} config.logging - default `false` - if true it will log changes to console
 * @example
 *const initialState = { count: 10 }
 *
 *const storeConfig = {
 *  listener: (state, key, prevValue, nextValue) => {
      console.log(`the key "${key}" changed in the store`)
      console.log('the old value is', prevValue)
      console.log('the current value is', nextValue)
      console.log('the state is', state)
    },
 *  logging: process.env.NODE_ENV !== 'production'
 *}
 *
 *export default withStore(App, initialState, storeConfig)
 */

var withStore = function withStore(WrappedComponent, initialValue, config) {
  var userConfig = Object.freeze(_objectSpread2(_objectSpread2({}, defaultConfig), config));
  var store = storeCreator(initialValue, userConfig);
  rawStore = createRawStore(store);
  return function (props) {
    return /*#__PURE__*/React.createElement(StoreContext.Provider, {
      value: {
        store: store
      }
    }, /*#__PURE__*/React.createElement(WrappedComponent, props));
  };
};

var Subscription = /*#__PURE__*/function () {
  function Subscription(store, onStateChange) {
    _classCallCheck(this, Subscription);

    this.store = store; // this.handleChangeWrapper = this.handleChangeWrapper.bind(this)

    this.unsuscribeFromSubscription = null;
    this.onStateChange = onStateChange.bind(this);
  }

  _createClass(Subscription, [{
    key: "subscribe",
    value: function subscribe() {
      this.unsuscribeFromSubscription = this.store.subscribe(this.onStateChange);
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe() {
      this.unsuscribeFromSubscription();
      this.unsuscribeFromSubscription = null;
    }
  }]);

  return Subscription;
}();

function equalityFn(a, b) {
  return a === b;
}

function useSelector(stateSelectorFn) {
  var _useReducer = useReducer(function (s) {
    return s + 1;
  }, 0),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      forceRender = _useReducer2[1];

  var _useContext = useContext(StoreContext),
      store = _useContext.store;

  var latestStateSelectorFn = useRef();
  var latestSelectedState = useRef();

  function checkForUpdates() {
    try {
      var newSelectedState = latestStateSelectorFn.current(store.getState().main);

      if (equalityFn(newSelectedState, latestSelectedState.current)) {
        return;
      }

      latestSelectedState.current = newSelectedState;
    } catch (err) {// ignore all errors
    }

    forceRender({});
  }

  var subscription = useMemo(function () {
    return new Subscription(store, checkForUpdates);
  }, [store, checkForUpdates]);
  var resultValue;

  if (stateSelectorFn !== latestStateSelectorFn.current) {
    resultValue = stateSelectorFn(store.getState().main);
  } else {
    resultValue = latestSelectedState.current;
  }

  useEffect(function () {
    latestStateSelectorFn.current = stateSelectorFn;
    latestSelectedState.current = resultValue;
  });
  useEffect(function () {
    subscription.subscribe();
    checkForUpdates();
    return function () {
      return subscription.unsubscribe();
    };
  }, [store, subscription]);
  return resultValue;
}
/**
 * `useStore` is a React Hook that access a value stored in the application global store. It returns the value, a function to update it (like React.useState) and a function to delete it.
 *
 * @template {any} T
 * @param {string} key - The lookup key to find the saved value in the store
 * @param {T} [defaultValue] - The value if the value in the store is missing
 *
 * @returns {[T, (value: T) => void, () => void]}
 * @return {array} an array with length 3:<br>
 * position 0 - the value of the data in the store.<br>
 * position 1 - a function *setValue* to modify the data in the store.<br>
 * position 2 - a function *deleteValue* to delete the value from the store.<br>
 *
 * @example
 * import {useStore} from 'react-context-hook'
 * const [username, setUsername, deleteUsername] = useStore('username')
 * <div>hello {username}</div>
 * <button onClick={()=> setUsername('my_username')}>set username</button>
 *
 */


function useStore(key, defaultValue) {
  return [useStoreValue(key, defaultValue), useSetStoreValue(key), useDeleteStoreValue(key)];
}
/**
 * Returns a function to set or update a variable in the store. You want to use this hook when you just need to modify the store, not read or delete a value from it.
 * @template {any} T
 * @param {string} key - the name of the variable to set in the store
 * @returns {(value: T) => void}
 * @return {Function} - a function to set a variable in the store with the given name<br>
 *
 * @example
 * import {useSetStoreValue} from 'react-context-hook'
 * const setUsername = useSetStoreValue('username')
 * <button onClick={()=> setUsername('my_username')}>set username</button>
 */


function useSetStoreValue(key) {
  var _useContext2 = useContext(StoreContext),
      store = _useContext2.store;

  return function (value) {
    store.dispatch(setStoreValueAction(key, value));
  };
}
/**
 * Returns a function to delete a variable in the store. You want to use this hook when you just need to delete a value in the store, not read or set a value from it.
 * @template {any} T
 * @param {string} key - the name of the variable to set in the store
 * @returns {(value: T) => void}
 * @return {Function} - a function to delete a variable in the store with the given name.
 *
 * @example
 * import {useDeleteStoreValue} from 'react-context-hook'
 * const deleteUsername = useDeleteStoreValue('username')
 * <button onClick={()=> deleteUsername()}>set username</button>
 */


function useDeleteStoreValue(key) {
  var _useContext3 = useContext(StoreContext),
      store = _useContext3.store;

  return function () {
    store.dispatch(deleteStoreValueAction(key));
  };
}
/**
 *This React hook returns an array to read and modify a value in the store:
 * `const [value, setValue] = useGetAndSet('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.
 * @template {any} T
 * @param {string} key - The lookup key to find the saved value in the store
 * @param {T} [defaultValue] - The default value if missing
 * @returns {[T, (value: T) => void]}
 * @return {array} an array with length 2:<br>
 * position 0 - the value of the data in the store.<br>
 * position 1 - a function *setValue* to modify the data in the store.<br>
 *
 * @example
 * import {useGetAndSet} from 'react-context-hook'
 * const [username, setUsername] = useGetAndSet('username')
 * <div>hello {username}</div>
 * <button onClick={()=> setUsername('my_username')}>set username</button>
 *
 *  const [value, setValue] = useGetAndSet('a_lookup_key_in_the_store')
 *
 */


function useGetAndSet(key, defaultValue) {
  return [useStoreValue(key, defaultValue), useSetStoreValue(key)];
}
/**
 *This React hook returns an array to read and delete a value in the store:
 * `const [value, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.
 * @template {any} T
 * @param {string} key - The lookup key to find the saved value in the store
 *
 * @returns {[T, (value: T) => void]}
 * @return {array} an array with length 2:<br>
 * position 0 - the value of the data in the store.<br>
 * position 1 - a function *deleteValue* to delete the data in the store.<br>
 *
 * @example
 * import {useGetAndDelete} from 'react-context-hook'
 * const [username, deleteUsername] = useGetAndDelete('username')
 * <div>hello {username}</div>
 * <button onClick={()=> deleteUsername('my_username')}>set username</button>
 *
 */


function useGetAndDelete(key) {
  return [useStoreValue(key), useDeleteStoreValue(key)];
}
/**
 *This React hook returns an array to set and delete a value in the store:
 * `const [setValue, deleteValue] = useGetAndDelete('a_lookup_key_in_the_store')`. The name of the variable in the arry is arbitrary and you can choose any string you like.
 * @template {any} T
 * @param {string} key - The lookup key to find the saved value in the store
 *
 * @returns {[(value: T) => void, () => void]}
 * @return {array} an array with length 2:<br>
 * position 0 - a function *setValue* to modify the data in the store.<br>
 * position 1 - a function *deleteValue* to delete the data in the store.<br>
 *
 * @example
 * import {useGetAndDelete} from 'react-context-hook'
 * const [username, deleteUsername] = useGetAndDelete('username')
 * <div>hello {username}</div>
 * <button onClick={()=> deleteUsername('my_username')}>set username</button>
 *
 */


function useSetAndDelete(key) {
  return [useSetStoreValue(key), useDeleteStoreValue(key)];
}
/**
 *
 * @template {any} T
 * @param {string} key - the name of the variable / value to be retrieved in the global store.
 * @param {T} [defaultValue] - an optional default value, if the value in the global store is not present.
 *
 * @returns {T | typeof defaultValue} the value on the global store, or the default value if passed, or `undefined`
 */


function useStoreValue(key, defaultValue) {
  function stateSelector(state) {
    return state[key];
  }

  var storeValue = useSelector(stateSelector);
  return storeValue !== undefined ? storeValue : defaultValue;
}
/**
 * Returns the whole store value, with all the variables stored in it. Changes to this object will not change the store
 *
 * @returns {Record}
 * @return {object} - An object representing the whole store value in read only mode.
 *
 * @example
 * import {useStoreState} from 'react-context-hook'
 * const store = useStoreState()
 * console.log('the store is', JSON.stringify(store))
 */


function useStoreState() {
  function stateSelector(state) {
    return state;
  }

  return useSelector(stateSelector);
}

export { rawStore as store, useDeleteStoreValue, useGetAndDelete, useGetAndSet, useSetAndDelete, useSetStoreValue, useStore, useStoreState, useStoreValue, withStore };
//# sourceMappingURL=index.es.js.map
